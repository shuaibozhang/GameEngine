#version 400 core

in vec3 position;
in vec2 textureCoords;
in vec3 normals;

out vec2 pass_textureCords;
out vec3 surfaceNormal;
out vec3 toLightVetor;
out vec3 toCameraVetor;
out float visibility;

uniform mat4 transformMat;
uniform mat4 projectionMat;
uniform mat4 viewMat;
uniform vec3 lightPosition;

const float density = 0.005;
const float gradient = 3.5;

void main(void){
    vec4 worldPosition = transformMat * vec4(position, 1.0);
    gl_Position = projectionMat * viewMat * worldPosition;
    pass_textureCords = textureCoords;

    surfaceNormal = (transformMat * vec4(normals, 0.0)).xyz;
    toLightVetor = lightPosition - worldPosition.xyz;

    toCameraVetor = (inverse(viewMat) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz;

    float distance = length(toCameraVetor);
    visibility = exp(-pow((distance * density), gradient));
    visibility = clamp(visibility, 0.0, 1.0);
}